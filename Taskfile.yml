version: '3'
env:
  POWERSHELL_TELEMETRY_OPTOUT: 1
  PWSH_TELEMETRY_OPTOUT: 1
tasks:
  # ðŸ”¹ CORE SYSTEM â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

  start-all:
    desc: "Start entire system (with proper cleanup)"
    cmds:
      - powershell -Command "New-Item -ItemType Directory -Path logs -Force"
      - task: kill-servers
      - task: build-servers
      - task: build
      - task: run-servers
      - task: run

  start-ml-all:
      desc: "Start entire system"
      cmds:
        - task: kill-ports
        - powershell -Command "New-Item -ItemType Directory -Path logs,bin -Force"
        - task: build-servers
        - task: start-servers
        - task: build  # Build balancer FIRST
        - task: run    # Start balancer BEFORE port check
        - task: wait-for-ports

  kill-servers:
    desc: "Force kill all backend servers (PowerShell)"
    cmds:
      - powershell -Command "try { Get-Process server5000,server5001,server5002 -ErrorAction SilentlyContinue | Stop-Process -Force -ErrorAction SilentlyContinue } catch {}; Write-Output 'Servers killed' | Tee-Object -FilePath logs/balancer.log -Append"

  run-servers:
    desc: "Run servers with port checking"
    cmds:
      - powershell -Command "Start-Process -NoNewWindow powershell -ArgumentList '-Command','.\bin\server5000.exe 2>&1 | Tee-Object -Append -FilePath logs/server5000.log'"
      - powershell -Command "Start-Process -NoNewWindow powershell -ArgumentList '-Command','.\bin\server5001.exe 2>&1 | Tee-Object -Append -FilePath logs/server5001.log'"
      - powershell -Command "Start-Process -NoNewWindow powershell -ArgumentList '-Command','.\bin\server5002.exe 2>&1 | Tee-Object -Append -FilePath logs/server5002.log'"
      - timeout /t 5

  build-servers:
    desc: "Build servers with port validation"
    cmds:
      - powershell -Command "if ((Test-NetConnection -ComputerName localhost -Port 5000).TcpTestSucceeded) { Write-Error 'Port 5000 in use!'; exit 1 } else { Write-Output 'Port 5000 available' | Tee-Object -FilePath logs/balancer.log -Append }"
      - powershell -Command "if ((Test-NetConnection -ComputerName localhost -Port 5001).TcpTestSucceeded) { Write-Error 'Port 5001 in use!'; exit 1 } else { Write-Output 'Port 5001 available' | Tee-Object -FilePath logs/balancer.log -Append }"
      - powershell -Command "if ((Test-NetConnection -ComputerName localhost -Port 5002).TcpTestSucceeded) { Write-Error 'Port 5002 in use!'; exit 1 } else { Write-Output 'Port 5002 available' | Tee-Object -FilePath logs/balancer.log -Append }"
      - powershell -Command "go build -o bin/server5000.exe backend/cmd/server5000/main.go 2>&1 | Tee-Object -FilePath logs/balancer.log -Append"
      - powershell -Command "go build -o bin/server5001.exe backend/cmd/server5001/main.go 2>&1 | Tee-Object -FilePath logs/balancer.log -Append"
      - powershell -Command "go build -o bin/server5002.exe backend/cmd/server5002/main.go 2>&1 | Tee-Object -FilePath logs/balancer.log -Append"

  start-servers:
      desc: "Start backend servers"
      cmds:
        - powershell -Command "Start-Process powershell -ArgumentList '-Command', 'go run backend/cmd/server5000/main.go'"
        - powershell -Command "Start-Process powershell -ArgumentList '-Command', 'go run backend/cmd/server5001/main.go'"
        - powershell -Command "Start-Process powershell -ArgumentList '-Command', 'go run backend/cmd/server5002/main.go'"
        - timeout /t 5

  # ðŸ”¹ LOAD BALANCER â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  build:
    desc: "Build Load Balancer"
    cmds:
      - powershell -Command "go build -o bin/neura-balancer backend/cmd/api/main.go 2>&1 | Tee-Object -FilePath logs/balancer.log -Append"

  run:
    desc: "Run Load Balancer"
    cmds:
      - powershell -Command "go run backend/cmd/api/main.go 2>&1 | Tee-Object -FilePath logs/balancer-run.log -Append"


  # ðŸ”¹ DOCKER â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  docker-build:
    desc: "Build Docker image for Load Balancer"
    cmds:
      - docker build -t neura-balancer -f Dockerfile .

  docker-run:
    desc: "Run Docker container"
    cmds:
      - docker run -p 8080:8080 --env-file .env neura-balancer

  docker-clean:
    desc: "Stop & remove Docker container"
    cmds:
      - docker stop $(docker ps -q --filter ancestor=neura-balancer) || true
      - docker rm $(docker ps -aq --filter ancestor=neura-balancer) || true

  docker-push:
    desc: "Push Docker Image to Registry"
    cmds:
      - docker tag neura-balancer your-dockerhub-username/neura-balancer:latest
      - docker push your-dockerhub-username/neura-balancer:latest

  # ðŸ”¹ KUBERNETES â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  k8s-deploy:
    desc: "Deploy Kubernetes manifests"
    cmds:
      - kubectl apply -f deployments/k8s/

  k8s-delete:
    desc: "Delete Kubernetes deployment"
    cmds:
      - kubectl delete -f deployments/k8s/

  k8s-status:
    desc: "Check Kubernetes pod status"
    cmds:
      - kubectl get pods -o wide

  k8s-logs:
    desc: "Show logs of backend pod"
    cmds:
      - kubectl logs -l app=backend --tail=100 -f

  k8s-restart:
    desc: "Restart Kubernetes deployment"
    cmds:
      - kubectl rollout restart deployment backend

  # ðŸ”¹ HELM â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  helm-deploy:
    desc: "Deploy using Helm"
    cmds:
      - helm install neura-balancer deployments/helm/

  helm-upgrade:
    desc: "Upgrade Helm deployment"
    cmds:
      - helm upgrade neura-balancer deployments/helm/

  helm-delete:
    desc: "Uninstall Helm release"
    cmds:
      - helm uninstall neura-balancer

  # ðŸ”¹ DATABASE â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  db-migrate:
    desc: "Run database migrations"
    cmds:
      - docker run --rm -v $(pwd)/migrations:/migrations migrate/migrate -path=/migrations -database 'postgres://admin:admin@localhost:5432/metrics_db?sslmode=disable' up

  db-reset:
    desc: "Reset database (delete & recreate tables)"
    cmds:
      - docker exec -it db psql -U admin -d metrics_db -c 'DROP SCHEMA public CASCADE; CREATE SCHEMA public;'

  # ðŸ”¹ MACHINE LEARNING â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  ml-train-local:
    desc: "Train model locally"
    cmds:
      - task: ml-prepare-dirs
      - python ml/training/train_model.py

  ml-prepare-dirs:
    desc: "Create required ML directories"
    cmds:
      - powershell -Command "New-Item -ItemType Directory -Force -Path ml/models"

  ml-serve-local:
    desc: "Run ML model server locally"
    cmds:
      - go run ml/model-server/main.go ml/model-server/router.go

  run-balancer-ml:
    desc: "Run load balancer with ML strategy"
    cmds:
      - powershell -Command "$env:LB_STRATEGY='ml'; $env:ML_MODEL_ENDPOINT='http://localhost:8081'; go run backend/cmd/api/main.go 2>&1 | Tee-Object -FilePath logs/balancer-ml.log -Append"
  
  
  test-ml-flow:
    desc: "Test full ML integration"
    cmds:
      - task: kill-ports
      - task: start-servers
      - timeout /t 5
      - task: ml-serve-local
      - timeout /t 2
      - task: run-balancer-ml
      - timeout /t 5
      - powershell -Command "curl.exe http://localhost:8081/health"
      - powershell -Command "hey -n 100 -c 10 http://localhost:8080/request"
      - powershell -Command "curl.exe http://localhost:8080/metrics | Select-String 'ml_'"

  # ðŸ”¹ CI/CD (GitHub Actions) â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  ci:
    desc: "Run CI pipeline (Lint, Test, Build)"
    cmds:
      - task: lint
      - task: test
      - task: build

  cd:
    desc: "Trigger GitHub Actions CD pipeline"
    cmds:
      - gh workflow run cd.yml -R your-repo/ai-load-balancer

  # ðŸ”¹ CLEANUP â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  clean:
    desc: "Remove built binaries & artifacts"
    cmds:
      - del /Q bin\*.exe
      - rmdir /S /Q tmp

  kill-ports:
    desc: "Kill processes using required ports"
    cmds:
      - powershell -File ./scripts/kill-ports.ps1
      - powershell -Command "Write-Output \"[$(Get-Date)] Ports 8080,8081,5000-5002 clearing attempt completed\" | Tee-Object -FilePath logs/cleanup.log -Append"

  wait-for-ports:
      desc: "Verify critical ports are responsive"
      cmds:
        - powershell -ExecutionPolicy Bypass -File ./scripts/wait-for-ports.ps1 -Ports 5000,8081 -MaxAttempts 10 -RetryInterval 2