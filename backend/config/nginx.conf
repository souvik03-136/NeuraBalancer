worker_processes auto;
worker_rlimit_nofile 8192;

events {
    worker_connections 1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    access_log    /var/log/nginx/access.log;
    error_log     /var/log/nginx/error.log;

    limit_req_zone $binary_remote_addr zone=one:10m rate=10r/s;

    server {
        listen       80;
        server_name  localhost;

        limit_req           zone=one burst=20 nodelay;
        client_max_body_size 50M;

        location / {
            proxy_pass              http://backend_load_balancer;
            proxy_set_header        Host              $host;
            proxy_set_header        X-Real-IP         $remote_addr;
            proxy_set_header        X-Forwarded-For   $proxy_add_x_forwarded_for;
            proxy_set_header        X-Forwarded-Proto $scheme;
            proxy_http_version      1.1;
            proxy_set_header        Upgrade           $http_upgrade;
            proxy_set_header        Connection        'upgrade';
            access_log              /var/log/nginx/request.log;
        }

        location /api/health {
            return 200 'OK';
        }

        location /api/route {
            content_by_lua_block {
                local lb_strategy = os.getenv("LB_STRATEGY") or "ml"
                if lb_strategy == "ml" then
                    local res = ngx.location.capture('/ml_route')
                    ngx.var.backend_server = res.body
                else
                    ngx.var.backend_server = ngx.shared.lb_backend:get("round_robin")
                end
                ngx.exec('@backend')
            }
        }

        location /ml_route {
            proxy_pass        http://ml-service:8000;
            proxy_set_header  Host              $host;
            proxy_set_header  X-Real-IP         $remote_addr;
            proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;
            proxy_set_header  X-Forwarded-Proto $scheme;
        }

        location @backend {
            proxy_pass        http://$backend_server;
            proxy_set_header  Host              $host;
            proxy_set_header  X-Real-IP         $remote_addr;
            proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;
            proxy_set_header  X-Forwarded-Proto $scheme;
        }
    }
}
